N = 2
Output:
move disk 1 from rod 1 to rod 2
move disk 2 from rod 1 to rod 3
move disk 1 from rod 2 to rod 3
3
Explanation: For N=2 , steps will be
as follows in the example and total
3 steps will be taken.

// Time Complexity: T(n) = 2T(n-1) + T(1)


    long long toh(int N, int from, int to, int aux) {
        // Your code here
        //base cond
        if(N == 1){
            cout<<"move disk "<<N<<" from rod "<<from<<" to rod "<<to<<endl;
            return 1;
        }
        
        //source to helper(auxilary)
        long long l = 1+toh(N-1,from,aux,to);
        
      cout<<"move disk "<<N<<" from rod "<<from<<" to rod "<<to<<endl;
      
      long long r = toh(N-1,aux,to,from);
      return l+r;
    
    
    }

};



############################################################### OR
// As an example take n = 3
// First we move disc 1 and 2 from origin to buffer (a recursive call for n-1 discs)
// then move the third disc from origin to destination
// and finally take disc 1 and 2 from buffer to destination.



void towerOfHanoi(int n, Tower origin, Tower buffer, Tower destination){
      if(n==1){
           print("Move disc 1 from "+origin+" to "+ destination);
           return;
      }
     towerOfHanoi(n-1, origin, destination, buffer);
     print("Move disc "+ n +" from "+origin+" to "+ destination);
     towerOfHanoi(n-1, buffer, origin, destination);
}
