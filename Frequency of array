input -  {10,10,10,20,30};
output- 
10 3
20 1
30 1

#################################### Brute Force 
#include <iostream>

using namespace std;

int main()
{
    int arr[] = {10,10,10,20,30};
    int n=6;
    int freq[6];
    int visited=-1;
    
    for(int i=0;i<n;i++){
        int count=1;
        for(int j=i+1;j<n;j++){
            if(arr[i] == arr[j]){
                count++;
                freq[j] = visited;
            }
            if(freq[i] != visited){
               freq[i] = count;
            }
        }
    }
    
    for(int i=0;i<6;i++){
        if(freq[i] != visited){
            cout<<arr[i]<<" "<<freq[i]<<endl;
        }
    }
}


############################################ Using hashmap --> O(n)

int main()
{
    int arr[] = {10,20,20,10,30,10};
    int n=6;
    unordered_map<int,int> m;
  
    for(int i=0;i<n;i++){
       int index = arr[i];//index(key)
       m[index]++;  //incre- index value
    } 
   
  for(auto i: m){
      cout<<i.first<<" "<<i.second<<endl;
  }
    
    
 ###########################################   TO print in order mark element as visited
    #include <iostream>
#include <unordered_map>
using namespace std;

int main()
{
    int arr[] = {10,20,20,10,30,10};
    int n=6;
    unordered_map<int,int> m;
  
    for(int i=0;i<n;i++){
       int index = arr[i];//index(key)
       m[index]++;  //incre- index value
    } 
   
  for(int i=0;i<n;i++){
      if(m[arr[i]] != -1){   //check if ele is visited or not
      cout<<arr[i]<<" "<<m[arr[i]]<<endl;
      m[arr[i]] = -1; //mark as visited
  }
    
}
}



