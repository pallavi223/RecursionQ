Input:
N = 6, X = 16
Arr[] = {1, 4, 45, 6, 10, 8}
Output: Yes


	// whose sum is equal to the given value
	bool hasArrayTwoCandidates(int arr[], int n, int x) {
	    // code here
	       sort(arr,arr+n);
    int sum=0;
       
         int s=0;
         int e=n-1;
        //sum=arr[i]+arr[s];
        while(s<e)
        {   
            sum=arr[s]+arr[e];
            if(sum==x)
            {
                return true;
            }
            else if(sum<x)
            {
                s++;
            }
            else
            {
                e--;
            }
        }
     return false;
     }
     
     
     ######################## Using Hashing
     
     #include <iostream>
#include <unordered_map>
using namespace std;

int solve(int arr[], int n , int x)
{
 
   unordered_map<int,int> umap;
   for(int i=0;i<n;i++){
       umap[arr[i]]++;
   }
   
   for(auto itr: umap){
       int key = itr.first;
       int val = itr.second;
       int pair = x-key;
       if(pair == key){
           if(val > 1){
               return true;
           }
       }
           else{
               //check if pair is available in map or not
               if(umap.find(pair) != umap.end())
               return true;
           
       }
   }
     return false;
   

}

int main(){
      int arr[] = {1,4,45,10,5};
   int n = 5;
   int x = 4;
   bool ans = solve(arr,n,x);
   if(ans == true){
       cout<<"Yes";
   }
   
   else{
      cout<<"No"; 
   }
   
}

